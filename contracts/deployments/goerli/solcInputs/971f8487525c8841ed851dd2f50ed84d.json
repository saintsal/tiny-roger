{
  "language": "Solidity",
  "sources": {
    "solidity-kit/solc_0.8/ERC20/ERC2612/implementations/UsingPermit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../implementations/ImplementingERC20Internal.sol\";\nimport \"../interfaces/IERC2612.sol\";\nimport \"../../../ERC712/implementations/UsingERC712.sol\";\nimport \"../../../ERC712/implementations/ImplementingExternalDomainSeparator.sol\";\n\nabstract contract UsingPermit is ImplementingERC20Internal, ImplementingExternalDomainSeparator, UsingERC712, IERC2612 {\n\tbytes32 internal constant PERMIT_TYPEHASH =\n\t\tkeccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n\tmapping(address => uint256) internal _nonces;\n\n\t/// @inheritdoc IERC2612\n\tfunction nonces(address owner) external view returns (uint256) {\n\t\treturn _nonces[owner];\n\t}\n\n\t/// @inheritdoc IERC2612\n\tfunction DOMAIN_SEPARATOR()\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\toverride(IERC2612, ImplementingExternalDomainSeparator)\n\t\treturns (bytes32);\n\n\t/// @inheritdoc IERC2612\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external override {\n\t\tif (owner == address(0)) {\n\t\t\trevert InvalidAddress(address(0));\n\t\t}\n\n\t\tuint256 currentNonce = _nonces[owner];\n\t\tbytes32 digest = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19\\x01\",\n\t\t\t\tDOMAIN_SEPARATOR(),\n\t\t\t\tkeccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentNonce, deadline))\n\t\t\t)\n\t\t);\n\t\tif (owner != ecrecover(digest, v, r, s)) {\n\t\t\trevert InvalidSignature();\n\t\t}\n\t\tif (deadline != 0 && block.timestamp > deadline) {\n\t\t\trevert DeadlineOver(block.timestamp, deadline);\n\t\t}\n\n\t\t_nonces[owner] = currentNonce + 1;\n\t\t_approveFor(owner, spender, value);\n\t}\n}\n"
    },
    "solidity-kit/solc_0.8/ERC20/ERC2612/implementations/UsingPermitWithDynamicChainID.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./UsingPermit.sol\";\nimport \"../../../ERC712/implementations/UsingERC712WithDynamicChainID.sol\";\n\nabstract contract UsingPermitWithDynamicChainID is UsingPermit, UsingERC712WithDynamicChainID {\n\tconstructor(address verifyingContract) UsingERC712WithDynamicChainID(verifyingContract) {}\n\n\t/// @inheritdoc IERC2612\n\tfunction DOMAIN_SEPARATOR() public view virtual override returns (bytes32) {\n\t\treturn _currentDomainSeparator();\n\t}\n}\n"
    },
    "solidity-kit/solc_0.8/ERC20/ERC2612/interfaces/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC20Errors.sol\";\n\ninterface IERC2612 {\n\t/// @notice The signature do not match the expected signer\n\terror InvalidSignature();\n\t/// @notice The permit has expired\n\t/// @param currentTime time at which the error happen\n\t/// @param deadline the deadline\n\terror DeadlineOver(uint256 currentTime, uint256 deadline);\n\n\t/// @notice allow `spender` to spend `value` amount of token on behalf of `owner`\n\t/// @param owner owner of the tokens\n\t/// @param spender address allowed to spend on behalf of the owner.\n\t/// @param value amount of token allowed to be spent\n\t/// @param deadline timestamp in seconds after which the permit is not valid.\n\t/// @param v signature part v\n\t/// @param r signature part r\n\t/// @param s signature part s\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external;\n\n\t/// @notice return the current nonce of the owner\n\t/// @param owner address queried\n\t/// @return nonce nonce value\n\tfunction nonces(address owner) external view returns (uint256 nonce);\n\n\t/// @notice EIP-712 Domain separator hash\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "solidity-kit/solc_0.8/ERC20/implementations/ERC20Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20WithCallback.sol\";\nimport \"../interfaces/IERC20WithDistribution.sol\";\nimport \"./ImplementingERC20Internal.sol\";\nimport \"../../utils/Constants.sol\";\n\nabstract contract ERC20Base is IERC20, IERC20WithCallback, IERC20WithDistribution, ImplementingERC20Internal {\n\tuint256 internal _totalSupply;\n\tmapping(address => uint256) internal _balances;\n\tmapping(address => mapping(address => uint256)) internal _allowances;\n\n\t/// @inheritdoc IERC20\n\tfunction totalSupply() external view override returns (uint256) {\n\t\treturn _internal_totalSupply();\n\t}\n\n\t/// @inheritdoc IERC20\n\tfunction balanceOf(address owner) external view override returns (uint256) {\n\t\treturn _balances[owner];\n\t}\n\n\t/// @inheritdoc IERC20\n\tfunction allowance(address owner, address spender) external view override returns (uint256) {\n\t\tif (owner == address(this)) {\n\t\t\t// see transferFrom: address(this) allows anyone\n\t\t\treturn type(uint256).max;\n\t\t}\n\t\treturn _allowances[owner][spender];\n\t}\n\n\t/// @inheritdoc IERC20\n\tfunction decimals() external pure virtual override returns (uint8) {\n\t\treturn uint8(18);\n\t}\n\n\t/// @inheritdoc IERC20\n\tfunction transfer(address to, uint256 amount) external override returns (bool) {\n\t\t_transfer(msg.sender, to, amount);\n\t\treturn true;\n\t}\n\n\t/// @inheritdoc IERC20WithDistribution\n\tfunction transferAlongWithETH(address payable to, uint256 amount) external payable returns (bool) {\n\t\t_transfer(msg.sender, to, amount);\n\t\tto.transfer(msg.value);\n\t\treturn true;\n\t}\n\n\t/// @inheritdoc IERC20WithDistribution\n\tfunction distributeAlongWithETH(address payable[] memory tos, uint256 totalAmount) external payable returns (bool) {\n\t\tuint256 val = msg.value / tos.length;\n\t\tif (msg.value != val * tos.length) {\n\t\t\trevert InvalidMsgValue(msg.value, val * tos.length);\n\t\t}\n\t\tuint256 amount = totalAmount / tos.length;\n\t\tif (totalAmount != amount * tos.length) {\n\t\t\trevert InvalidTotalAmount(totalAmount, amount * tos.length);\n\t\t}\n\t\tfor (uint256 i = 0; i < tos.length; i++) {\n\t\t\t_transfer(msg.sender, tos[i], amount);\n\t\t\ttos[i].transfer(val);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/// @inheritdoc IERC20WithCallback\n\tfunction transferAndCall(\n\t\taddress to,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool) {\n\t\t_transfer(msg.sender, to, amount);\n\t\treturn ITransferReceiver(to).onTokenTransfer(msg.sender, amount, data);\n\t}\n\n\t/// @inheritdoc IERC20WithCallback\n\tfunction transferFromAndCall(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool) {\n\t\t_transferFrom(from, to, amount);\n\t\treturn ITransferReceiver(to).onTokenTransfer(from, amount, data);\n\t}\n\n\t/// @inheritdoc IERC20WithCallback\n\tfunction transferOnBehalfAndCall(\n\t\taddress forAddress,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool) {\n\t\t_transfer(msg.sender, to, amount);\n\t\treturn ITransferOnBehalfReceiver(to).onTokenTransferedOnBehalf(msg.sender, forAddress, amount, data);\n\t}\n\n\t/// @inheritdoc IERC20\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount\n\t) external override returns (bool) {\n\t\t_transferFrom(from, to, amount);\n\t\treturn true;\n\t}\n\n\t/// @inheritdoc IERC20\n\tfunction approve(address spender, uint256 amount) external override returns (bool) {\n\t\t_approveFor(msg.sender, spender, amount);\n\t\treturn true;\n\t}\n\n\t/// @inheritdoc IERC20WithCallback\n\tfunction approveAndCall(\n\t\taddress spender,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool) {\n\t\t_approveFor(msg.sender, spender, amount);\n\t\treturn IApprovalReceiver(spender).onTokenApproval(msg.sender, amount, data);\n\t}\n\n\t// ------------------------------------------------------------------------------------------------------------------\n\t// INTERNALS\n\t// ------------------------------------------------------------------------------------------------------------------\n\n\tfunction _internal_totalSupply() internal view override returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\tfunction _approveFor(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 amount\n\t) internal override {\n\t\tif (owner == address(0) || spender == address(0)) {\n\t\t\trevert InvalidAddress(address(0));\n\t\t}\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\tfunction _transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount\n\t) internal {\n\t\t// anybody can transfer from this\n\t\t// this allow mintAndApprovedCall without gas overhead\n\t\tif (msg.sender != from && from != address(this)) {\n\t\t\tuint256 currentAllowance = _allowances[from][msg.sender];\n\t\t\tif (currentAllowance != type(uint256).max) {\n\t\t\t\t// save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n\t\t\t\tif (currentAllowance < amount) {\n\t\t\t\t\trevert NotAuthorizedAllowance(currentAllowance, amount);\n\t\t\t\t}\n\t\t\t\t_allowances[from][msg.sender] = currentAllowance - amount;\n\t\t\t}\n\t\t}\n\t\t_transfer(from, to, amount);\n\t}\n\n\tfunction _transfer(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount\n\t) internal {\n\t\tif (to == address(0) || to == address(this)) {\n\t\t\trevert InvalidAddress(to);\n\t\t}\n\t\tuint256 currentBalance = _balances[from];\n\t\tif (currentBalance < amount) {\n\t\t\trevert NotEnoughTokens(currentBalance, amount);\n\t\t}\n\t\t_balances[from] = currentBalance - amount;\n\t\t_balances[to] += amount;\n\t\temit Transfer(from, to, amount);\n\t}\n\n\tfunction _transferAllIfAny(address from, address to) internal {\n\t\tuint256 balanceLeft = _balances[from];\n\t\tif (balanceLeft > 0) {\n\t\t\t_balances[from] = 0;\n\t\t\t_balances[to] += balanceLeft;\n\t\t\temit Transfer(from, to, balanceLeft);\n\t\t}\n\t}\n\n\tfunction _mint(address to, uint256 amount) internal override {\n\t\t_totalSupply += amount;\n\t\t_balances[to] += amount;\n\t\temit Transfer(address(0), to, amount);\n\t}\n\n\tfunction _burnFrom(address from, uint256 amount) internal override {\n\t\tuint256 currentBalance = _balances[from];\n\t\tif (currentBalance < amount) {\n\t\t\trevert NotEnoughTokens(currentBalance, amount);\n\t\t}\n\t\t_balances[from] = currentBalance - amount;\n\t\t_totalSupply -= amount;\n\t\temit Transfer(from, address(0), amount);\n\t}\n}\n"
    },
    "solidity-kit/solc_0.8/ERC20/implementations/ImplementingERC20Internal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ImplementingERC20Internal {\n\tfunction _approveFor(\n\t\taddress owner,\n\t\taddress target,\n\t\tuint256 amount\n\t) internal virtual;\n\n\tfunction _mint(address to, uint256 amount) internal virtual;\n\n\tfunction _burnFrom(address from, uint256 amount) internal virtual;\n\n\tfunction _internal_totalSupply() internal view virtual returns (uint256);\n}\n"
    },
    "solidity-kit/solc_0.8/ERC20/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20Errors.sol\";\n\ninterface IERC20 {\n\t/// @notice trigger when tokens are transferred, including zero value transfers.\n\t/// @param from the account the tokens are sent from\n\t/// @param to the account the tokens are sent to\n\t/// @param value number of tokens sent\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/// @notice trigger on approval amount being set.\n\t///   Note that Transfer events need to be considered to compute the current allowance.\n\t/// @param owner the account approving the `spender`\n\t/// @param spender the account allowed to spend\n\t/// @param value the amount granted\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\n\t/// @notice Returns the total token supply.\n\tfunction totalSupply() external view returns (uint256);\n\n\t/// @notice Returns the number of decimals the token uses.\n\tfunction decimals() external view returns (uint8);\n\n\t/// @notice Returns the symbol of the token.\n\tfunction symbol() external view returns (string memory);\n\n\t/// @notice Returns the name of the token.\n\tfunction name() external view returns (string memory);\n\n\t/// @notice Returns the account balance of another account with address `owner`.\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\t/// @notice Transfers `amount` of tokens to address `to`.\n\tfunction transfer(address to, uint256 amount) external returns (bool);\n\n\t/// @notice Returns the amount which `spender` is still allowed to withdraw from `owner`.\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/// @notice Allows `spender` to withdraw from your account multiple times, up to `amount`.\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/// @notice Transfers `amount` tokens from address `from` to address `to`.\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount\n\t) external returns (bool);\n}\n"
    },
    "solidity-kit/solc_0.8/ERC20/interfaces/IERC20Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The msg value do not match the expected value\n/// @param provided msg.value amount provided\n/// @param expected value expected\nerror InvalidMsgValue(uint256 provided, uint256 expected);\n/// @notice The total amount provided do not match the expected value\n/// @param provided msg.value amount provided\n/// @param expected value expected\nerror InvalidTotalAmount(uint256 provided, uint256 expected);\n/// @notice An invalid address is specified (for example: zero address)\n/// @param addr invalid address\nerror InvalidAddress(address addr);\n/// @notice the amount requested exceed the allowance\n/// @param currentAllowance the current allowance\n/// @param expected amount expected\nerror NotAuthorizedAllowance(uint256 currentAllowance, uint256 expected);\n/// @notice the amount requested exceed the balance\n/// @param currentBalance the current balance\n/// @param expected amount expected\nerror NotEnoughTokens(uint256 currentBalance, uint256 expected);\n"
    },
    "solidity-kit/solc_0.8/ERC20/interfaces/IERC20WithCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\n\ninterface ITransferReceiver {\n\t/// @notice called by ERC20 token after transfer been executed.\n\t/// @param payer account sending the money\n\t/// @param amount number of token transfered\n\t/// @param data extra data\n\tfunction onTokenTransfer(\n\t\taddress payer,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool);\n}\n\ninterface ITransferOnBehalfReceiver {\n\t/// @notice called by ERC20 token after transfer been executed.\n\t/// @param payer account sending the money\n\t/// @param forAddress account to be considered as te actual payer\n\t/// @param amount number of token transfered\n\t/// @param data extra data\n\tfunction onTokenTransferedOnBehalf(\n\t\taddress payer,\n\t\taddress forAddress,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool);\n}\n\ninterface IApprovalReceiver {\n\t/// @notice called by ERC20 token after transfer been executed.\n\t/// @param owner account that grant the approval\n\t/// @param amount number of token approved\n\t/// @param data extra data\n\tfunction onTokenApproval(\n\t\taddress owner,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool);\n}\n\ninterface IERC20WithCallback is IERC20 {\n\t/// @notice transfer `amount` token to `to` and callback into it via `onTokenTransfer`\n\t/// @param to account to receive the tokens\n\t/// @param amount number of token to transfer\n\t/// @param data extra data\n\t/// @return success\n\tfunction transferAndCall(\n\t\taddress to,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool);\n\n\t/// @notice transfer `amount` token to `to` and callback into it via `onTokenTransfer`\n\t/// @param from account to send the token from\n\t/// @param to account to receive the tokens\n\t/// @param amount number of token to transfer\n\t/// @param data extra data\n\t/// @return success\n\tfunction transferFromAndCall(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool);\n\n\t/// @notice transfer `amount` token to `to` and callback into it via `onTokenTransferedOnBehalf`\n\t/// @param forAddress account to send the token for\n\t/// @param to account to receive the tokens\n\t/// @param amount number of token to transfer\n\t/// @param data extra data\n\t/// @return success\n\tfunction transferOnBehalfAndCall(\n\t\taddress forAddress,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool);\n\n\t/// @notice approve `amount` token to be spent by `spender` and callback into it via `onTokenApproval`\n\t/// @param spender account to send the token for\n\t/// @param amount number of token to transfer\n\t/// @param data extra data\n\t/// @return success\n\tfunction approveAndCall(\n\t\taddress spender,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external returns (bool);\n}\n"
    },
    "solidity-kit/solc_0.8/ERC20/interfaces/IERC20WithDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\n\ninterface IERC20WithDistribution is IERC20 {\n\t/// @notice transfer\n\tfunction transferAlongWithETH(address payable to, uint256 amount) external payable returns (bool);\n\n\t/// @notice distribute\n\tfunction distributeAlongWithETH(address payable[] memory tos, uint256 totalAmount) external payable returns (bool);\n}\n"
    },
    "solidity-kit/solc_0.8/ERC712/implementations/ImplementingExternalDomainSeparator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ImplementingExternalDomainSeparator {\n\t/// @notice EIP-712 Domain separator hash\n\tfunction DOMAIN_SEPARATOR() public view virtual returns (bytes32);\n}\n"
    },
    "solidity-kit/solc_0.8/ERC712/implementations/Named.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Named {\n\t/// @notice Returns the name of the contract.\n\tfunction name() public view virtual returns (string memory);\n}\n"
    },
    "solidity-kit/solc_0.8/ERC712/implementations/UsingERC712.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC5267.sol\";\n\nabstract contract UsingERC712 is IERC5267 {}\n"
    },
    "solidity-kit/solc_0.8/ERC712/implementations/UsingERC712WithDynamicChainID.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./UsingERC712.sol\";\nimport \"./Named.sol\";\n\nabstract contract UsingERC712WithDynamicChainID is UsingERC712, Named {\n\tuint256 private immutable _deploymentChainID;\n\tbytes32 private immutable _deploymentDomainSeparator;\n\n\tconstructor(address verifyingContract) {\n\t\tuint256 chainID;\n\t\tassembly {\n\t\t\tchainID := chainid()\n\t\t}\n\n\t\t_deploymentChainID = chainID;\n\t\t_deploymentDomainSeparator = _calculateDomainSeparator(\n\t\t\tchainID,\n\t\t\tverifyingContract == address(0) ? address(this) : verifyingContract\n\t\t);\n\t}\n\n\t/// @inheritdoc IERC5267\n\tfunction eip712Domain()\n\t\texternal\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (\n\t\t\tbytes1 fields,\n\t\t\tstring memory name,\n\t\t\tstring memory version,\n\t\t\tuint256 chainID,\n\t\t\taddress verifyingContract,\n\t\t\tbytes32 salt,\n\t\t\tuint256[] memory extensions\n\t\t)\n\t{\n\t\tfields = 0x0D;\n\t\tname = _name();\n\t\tversion = \"\";\n\t\tassembly {\n\t\t\tchainID := chainid()\n\t\t}\n\t\tverifyingContract = address(this);\n\t\tsalt = 0;\n\t\textensions = new uint256[](0);\n\t}\n\n\t// ------------------------------------------------------------------------------------------------------------------\n\t// INTERNALS\n\t// ------------------------------------------------------------------------------------------------------------------\n\n\t// need to ensure we can use return value \"name\" in `eip712Domain`\n\tfunction _name() internal view returns (string memory) {\n\t\treturn name();\n\t}\n\n\tfunction _currentDomainSeparator() internal view returns (bytes32) {\n\t\tuint256 chainID;\n\t\tassembly {\n\t\t\tchainID := chainid()\n\t\t}\n\n\t\t// in case a fork happen, to support the chain that had to change its chainID, we compute the domain operator\n\t\treturn\n\t\t\tchainID == _deploymentChainID\n\t\t\t\t? _deploymentDomainSeparator\n\t\t\t\t: _calculateDomainSeparator(chainID, address(this));\n\t}\n\n\t/// @dev Calculate the Domain Separator used to compute ERC712 hash\n\tfunction _calculateDomainSeparator(uint256 chainID, address verifyingContract) private view returns (bytes32) {\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tabi.encode(\n\t\t\t\t\tkeccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"),\n\t\t\t\t\tkeccak256(bytes(name())),\n\t\t\t\t\tchainID,\n\t\t\t\t\tverifyingContract\n\t\t\t\t)\n\t\t\t);\n\t}\n}\n"
    },
    "solidity-kit/solc_0.8/ERC712/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n\t/// @notice The return values of this function MUST describe the domain separator that is used for verification of EIP-712 signatures in the contract. They describe both the form of the EIP712Domain struct (i.e., which of the optional fields and extensions are present) and the value of each field, as follows.\n\t/// @return fields A bit map where bit i is set to 1 if and only if domain field i is present (0 ≤ i ≤ 4). Bits are read from least significant to most significant, and fields are indexed in the order that is specified by EIP-712, identical to the order in which they are listed in the function type.\n\t/// @return name EIP-712 name\n\t/// @return version EIP-712 version\n\t/// @return chainID EIP-712 chainID\n\t/// @return verifyingContract EIP-712 name verifyingContract\n\t/// @return salt EIP-712 salt\n\t/// @return extensions A list of EIP numbers that specify additional fields in the domain. The method to obtain the value for each of these additional fields and any conditions for inclusion are expected to be specified in the respective EIP. The value of fields does not affect their inclusion.\n\tfunction eip712Domain()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tbytes1 fields,\n\t\t\tstring memory name,\n\t\t\tstring memory version,\n\t\t\tuint256 chainID,\n\t\t\taddress verifyingContract,\n\t\t\tbytes32 salt,\n\t\t\tuint256[] memory extensions\n\t\t);\n}\n"
    },
    "solidity-kit/solc_0.8/utils/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Constants {\n\tuint256 internal constant DECIMALS_18 = 1000000000000000000;\n}\n"
    },
    "src/Tokens.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.8.17;\n\nimport \"solidity-kit/solc_0.8/ERC20/implementations/ERC20Base.sol\";\nimport \"solidity-kit/solc_0.8/ERC20/ERC2612/implementations/UsingPermitWithDynamicChainID.sol\";\n\ncontract Tokens is ERC20Base, UsingPermitWithDynamicChainID {\n\tconstructor(address to, uint256 amount) UsingPermitWithDynamicChainID(address(0)) {\n\t\t_mint(to, amount);\n\t}\n\n\tstring public constant symbol = \"TOKENS\";\n\n\tfunction name() public pure override(Named, IERC20) returns (string memory) {\n\t\treturn \"Tokens\";\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}